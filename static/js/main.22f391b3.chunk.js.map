{"version":3,"sources":["actions/index.js","pages/Login.js","actions/actionsTypes.js","components/Header.js","components/Loading.js","components/Expenses.js","components/TableExpenses.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["getCoins","a","fetch","request","json","data","Login","props","validEmail","email","test","handleChange","event","state","senha","target","name","value","setState","senhaValid","length","emailValid","buttonDisabled","handleClick","saveUser","redirect","this","to","htmlFor","label","type","id","onChange","data-testid","required","disabled","onClick","React","Component","connect","dispatch","payload","Header","expenses","className","reduce","acc","exchangeRates","currency","ask","user","wallet","Loading","INITIAL_STATE","description","method","tag","Expenses","insertExpense","componentDidMount","fetchCoins","isLoading","currencies","step","placeholder","Object","entries","filter","curr","map","option","index","key","message","TableExpenses","expense","deleteExpense","valueConverted","toFixed","split","deleteWalletData","Wallet","App","exact","path","component","Boolean","window","location","hostname","match","action","error","concat","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.22f391b3.chunk.js","sourcesContent":["// Coloque aqui suas actions\nimport { USER_INFO, CREATE_WALLET_DATA, DELETE_WALLET_DATA,\n  EDIT_WALLET_DATA, THUNK_FETCH, ERROR_FETCH,\n  RETURN_DATA } from './actionsTypes';\n\nexport const user = (email) => ({\n  type: USER_INFO,\n  payload: email,\n});\n\nexport const createWalletData = (expense) => ({\n  type: CREATE_WALLET_DATA,\n  payload: expense,\n});\n\nexport const deleteWalletData = (expense) => ({\n  type: DELETE_WALLET_DATA,\n  payload: expense,\n});\n\nexport const editWalletData = (state) => ({\n  type: EDIT_WALLET_DATA,\n  payload: state,\n});\n\nexport const thunkFetch = () => ({\n  type: THUNK_FETCH,\n});\n\nexport const errorFetch = (error) => ({\n  type: ERROR_FETCH,\n  payload: error.message,\n});\n\nexport const returnData = (coins) => ({\n  type: RETURN_DATA,\n  payload: coins,\n});\n\nexport async function getCoins() {\n  const endpoint = 'https://economia.awesomeapi.com.br/json/all';\n  const request = await fetch(endpoint);\n  const data = await request.json();\n  return data;\n}\n\nconst thunkCoins = () => async (dispatch) => {\n  dispatch(thunkFetch());\n  try {\n    const currencies = await getCoins();\n    dispatch(returnData(currencies));\n  } catch (error) {\n    dispatch(errorFetch(error.message));\n  }\n};\n\nexport { thunkCoins };\n","import React from 'react';\nimport { func } from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { user } from '../actions/index';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      senha: '',\n      buttonDisabled: true,\n      redirect: false,\n    };\n  }\n\n  validEmail = (email) => {\n    const regex = /^[\\w+.]+@\\w+\\.\\w{2,}(?:\\.\\w{2})?$/;\n    return regex.test(email);\n  };\n\n  handleChange = (event) => {\n    const { email, senha } = this.state;\n    const { target: { name, value } } = event;\n    this.setState({ [name]: value },\n      () => {\n        const LENGTHSENHA = 5;\n        const senhaValid = senha.length >= LENGTHSENHA;\n        const emailValid = this.validEmail(email);\n        this.setState({ buttonDisabled: !(senhaValid && emailValid) });\n      });\n  }\n\n  handleClick = () => {\n    const { props: { saveUser }, state: { email },\n    } = this;\n    saveUser(email);\n    this.setState({ redirect: true });\n  };\n\n  render() {\n    const { email, senha, buttonDisabled, redirect } = this.state;\n    return (\n      <>\n        <h1>TrybeWallet</h1>\n        { redirect && <Redirect to=\"/carteira\" />}\n        <fildset>\n          <label htmlFor=\"email\">\n            Email\n            <br />\n            <input\n              label=\"Email: \"\n              type=\"email\"\n              name=\"email\"\n              id=\"email\"\n              onChange={ this.handleChange }\n              value={ email }\n              data-testid=\"email-input\"\n              required\n            />\n          </label>\n          <label htmlFor=\"senha\">\n            Senha\n            <br />\n            <input\n              label=\"Senha: \"\n              type=\"password\"\n              name=\"senha\"\n              id=\"senha\"\n              onChange={ this.handleChange }\n              value={ senha }\n              data-testid=\"password-input\"\n              required\n            />\n          </label>\n          <button\n            label=\"Entrar\"\n            type=\"button\"\n            disabled={ buttonDisabled }\n            onClick={ this.handleClick }\n          >\n            Entrar\n          </button>\n        </fildset>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveUser: (state) => dispatch(user(state)),\n});\n\nLogin.propTypes = {\n  saveUser: func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n\n// Como validar emails com regex: https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n","export const USER_INFO = 'USER_INFO';\nexport const CREATE_WALLET_DATA = 'CREATE_WALLET_DATA';\nexport const DELETE_WALLET_DATA = 'DELETE_WALLET_DATA';\nexport const EDIT_WALLET_DATA = 'EDIT_WALLET_DATA';\nexport const THUNK_FETCH = 'THUNK_FETCH';\nexport const ERROR_FETCH = 'ERROR_FETCH';\nexport const RETURN_DATA = 'RETURN_DATA';\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { string, shape } from 'prop-types';\n\nclass Header extends Component {\n  render() {\n    const { props: { email, expenses } } = this;\n    return (\n      <div className=\"data-user\">\n        <p data-testid=\"email-field\">\n          Email:\n          { email }\n        </p>\n        <p data-testid=\"total-field\">\n          Despesa total:\n          {\n            expenses\n              ? expenses.reduce((acc, { value, exchangeRates, currency }) => acc\n              + (+value * +exchangeRates[currency].ask), 0)\n              : 0\n          }\n        </p>\n        <p data-testid=\"header-currency-field\">\n          Moeda de câmbio: BRL\n        </p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.propTypes = {\n  email: string.isRequired,\n  expenses: shape({}).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(Header);\n","import React, { Component } from 'react';\n\nexport default class Loading extends Component {\n  render() {\n    return (\n      <h2>Carregando...</h2>\n    );\n  }\n}\n","import { func, bool, shape } from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { thunkCoins, createWalletData, getCoins } from '../actions/index';\nimport Loading from './Loading';\n\nconst INITIAL_STATE = {\n  value: 0,\n  description: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n};\n\nclass Expenses extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = INITIAL_STATE;\n  }\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleClick = async () => {\n    const { props: { insertExpense, expenses },\n    } = this;\n    const exchangeRates = await getCoins();\n    insertExpense({ ...this.state,\n      exchangeRates,\n      id: expenses.length,\n    });\n    this.setState({ value: 0, description: '' });\n  }\n\n  componentDidMount = () => {\n    const { fetchCoins } = this.props;\n    fetchCoins();\n    // this.setState({ exchangeRates: currencies });\n    /* const { method, tag } = this.state;\n    console.log(method, tag); */\n  };\n\n  render() {\n    const { value, description, currency, method, tag } = this.state;\n    const { isLoading, currencies } = this.props;\n\n    if (isLoading) {\n      return <Loading />;\n    }\n\n    return (\n      isLoading ? <Loading />\n        : (\n          <fieldset className=\"set-expense\">\n            <legend>Despesa</legend>\n            <label htmlFor=\"value\">\n              Valor\n              <br />\n              <input\n                type=\"number\"\n                step=\"0.01\"\n                data-testid=\"value-input\"\n                id=\"value\"\n                name=\"value\"\n                value={ value }\n                onChange={ this.handleChange }\n              />\n            </label>\n            <label htmlFor=\"description\">\n              Descrição\n              <br />\n              <input\n                type=\"text\"\n                data-testid=\"description-input\"\n                id=\"description\"\n                name=\"description\"\n                value={ description }\n                onChange={ this.handleChange }\n                placeholder=\"Descrição\"\n              />\n            </label>\n            <label htmlFor=\"currency\">\n              Moeda\n              <br />\n              <select\n                type=\"text\"\n                data-testid=\"currency-input\"\n                name=\"currency\"\n                id=\"currency\"\n                value={ currency }\n                onChange={ this.handleChange }\n                required\n              >\n                {\n                  Object.entries(currencies)\n                    .filter((curr) => curr[0] !== 'USDT')\n                    .map((option, index) => (\n                      <option\n                        key={ index }\n                        data-testid={ option[0] }\n                      >\n                        { option[0] }\n                      </option>\n                    ))\n                }\n              </select>\n            </label>\n            <label htmlFor=\"method\">\n              Método\n              <br />\n              <select\n                type=\"text\"\n                data-testid=\"method-input\"\n                name=\"method\"\n                id=\"method\"\n                value={ method }\n                onChange={ this.handleChange }\n                required\n              >\n                {/*  {\n                  method.map((option, index) => (\n                    <option key={ index }>{ option }</option>\n                  ))\n                } */}\n                <option>Dinheiro</option>\n                <option>Cartão de crédito</option>\n                <option>Cartão de débito</option>\n              </select>\n            </label>\n            <label htmlFor=\"tag\">\n              Categoria\n              <br />\n              <select\n                type=\"text\"\n                data-testid=\"tag-input\"\n                name=\"tag\"\n                id=\"tag\"\n                value={ tag }\n                onChange={ this.handleChange }\n                required\n              >\n                <option>Alimentação</option>\n                <option>Lazer</option>\n                <option>Transporte</option>\n                <option>Trabalho</option>\n                <option>Saúde</option>\n              </select>\n            </label>\n            <button\n              type=\"button\"\n              onClick={ this.handleClick }\n            >\n              Adicionar despesa\n            </button>\n          </fieldset>\n        )\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoading: state.wallet.isLoading,\n  currencies: state.wallet.currencies,\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  insertExpense: (state) => dispatch(createWalletData(state)),\n  fetchCoins: () => dispatch(thunkCoins()),\n  // deleteData: (state) => dispatch(deleteWalletData(state)),\n  // editData: (state) => dispatch(editWalletData(state)),\n});\n\nExpenses.propTypes = {\n  insertExpense: func.isRequired,\n  fetchCoins: func.isRequired,\n  isLoading: bool.isRequired,\n  currencies: shape({}).isRequired,\n  expenses: shape({}).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Expenses);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { shape, func } from 'prop-types';\nimport { deleteWalletData } from '../actions/index';\n\nclass TableExpenses extends Component {\n  handleClick = (expense) => {\n    const { deleteExpense } = this.props;\n    deleteExpense(expense);\n  }\n\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        { expenses\n          && expenses.map((expense) => {\n            const { id, description, tag, method, value,\n              exchangeRates, currency } = expense;\n            const valueConverted = (+value * +exchangeRates[currency].ask).toFixed(2);\n            return (\n              <tbody key={ id }>\n                <tr>\n                  <td>{ description }</td>\n                  <td>{ tag }</td>\n                  <td>{ method }</td>\n                  <td>{ (+value).toFixed(2) }</td>\n                  <td>{ exchangeRates[currency].name.split('/')[0] }</td>\n                  <td>{ (+exchangeRates[currency].ask).toFixed(2) }</td>\n                  <td>{ valueConverted }</td>\n                  <td>Real</td>\n                  <td>\n                    <button type=\"button\">Editar</button>\n                    <button\n                      type=\"button\"\n                      data-testid=\"delete-btn\"\n                      onClick={ () => this.handleClick(expense) }\n                    >\n                      Deletar\n                    </button>\n                  </td>\n                </tr>\n              </tbody>\n            );\n          })}\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (expense) => (dispatch(deleteWalletData(expense))),\n});\n\nTableExpenses.propTypes = {\n  expenses: shape({}).isRequired,\n  deleteExpense: func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableExpenses);\n","import React from 'react';\nimport Header from '../components/Header';\nimport Expenses from '../components/Expenses';\nimport TableExpenses from '../components/TableExpenses';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <>\n        <div className=\"header-wallet\">\n          <h1>TrybeWallet</h1>\n        </div>\n        <hr />\n        <div className=\"user-infos-sets\">\n          <Header />\n          <Expenses />\n        </div>\n        <TableExpenses />\n      </>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </Switch>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { USER_INFO } from '../actions/actionsTypes';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nconst user = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case USER_INFO:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default user;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { CREATE_WALLET_DATA, DELETE_WALLET_DATA,\n  EDIT_WALLET_DATA, THUNK_FETCH, RETURN_DATA,\n  ERROR_FETCH,\n} from '../actions/actionsTypes';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  isLoading: false,\n  error: '',\n};\n\nconst wallet = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case CREATE_WALLET_DATA:\n    return ({\n      ...state,\n      expenses: state.expenses.concat(action.payload),\n    });\n  case DELETE_WALLET_DATA:\n    return ({\n      ...state,\n      expenses: state.expenses.filter((expense) => expense !== action.payload),\n    });\n  case EDIT_WALLET_DATA:\n    return state;\n  case THUNK_FETCH:\n    return { ...state, isLoading: true };\n  case RETURN_DATA:\n    return { ...state,\n      isLoading: false,\n      currencies: action.payload,\n    };\n  case ERROR_FETCH:\n    return { ...state,\n      error: action.payload,\n      isLoading: false };\n  default:\n    return state;\n  }\n};\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/index';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}